#include <stdio.h>
#include <string.h>

typedef struct {
    char nombre[50];
    int ataque;
    int defensa;
    int vida;
} Objeto;

typedef struct {
    char nombre[50];
    int ataque_base;
    int defensa_base;
    int velocidad_ataque;
    int vida_base;
    Objeto objetos[3];
} Personaje;

typedef struct {
    char nombre[50];
    Personaje personajes[3];
} Equipo;

void leerobjeto(Objeto *objeto) {
    //printf("Ingrese el nombre del objeto: ");
    fgets(objeto->nombre, 50, stdin);
    objeto->nombre[strcspn(objeto->nombre, "\n")] = 0;

    //printf("Ingrese estadísticas del objeto: ");
    scanf("%d %d %d", &objeto->ataque, &objeto->defensa, &objeto->vida);
}

void leerpersonaje(Personaje *personaje) {
    //printf("Ingrese el nombre del personaje: ");
    fgets(personaje->nombre, 50, stdin);
    personaje->nombre[strcspn(personaje->nombre, "\n")] = 0;

    //printf("Ingrese estadísticas base: ");
    scanf("%d %d %d %d", &personaje->ataque_base, &personaje->defensa_base, &personaje->velocidad_ataque, &personaje->vida_base);

    int num_objetos;
    printf("Ingrese el número de objetos (máximo %d): ", 3);
    scanf("%d", &num_objetos);

    for (int i = 0; i < num_objetos; i++) {
        leerobjeto(&personaje->objetos[i]);
    }
}

void leerequipo(Equipo *equipo) {
    int num_personajes;
    //printf("Ingrese el número de personajes por equipo: ");
    scanf("%d", &num_personajes);

    //printf("Ingese el nombre del equipo: ");
    fgets(equipo->nombre, 50, stdin);
    equipo->nombre[strcspn(equipo->nombre, "\n")] = 0;

    for (int i = 0; i < num_personajes; i++) {
        leerpersonaje(&equipo->personajes[i]);
    }
}

void mostrarobjeto(Objeto *objeto) {
    printf("Objeto %s (%d, %d, %d)\n", objeto->nombre, objeto->ataque, objeto->defensa, objeto->vida);
}

void mostrarpersonaje(Personaje *personaje) {
    printf("Personaje %s [%d, %d, %d, %d, %d]\n", personaje->nombre, personaje->ataque_base, personaje->defensa_base, personaje->velocidad_ataque, personaje->vida_base, 3);

    for (int i = 0; i < 3; i++) {
        mostrarobjeto(&personaje->objetos[i]);
    }
}

void mostrarEquipo(Equipo *equipo) {
    printf("Equipo %s\n", equipo->nombre);

    for (int i = 0; i < 3; i++) {
        mostrarpersonaje(&equipo->personajes[i]);
    }
}
Objeto *objetodano(Equipo *equipo) {
    Objeto *mayordano = &equipo->personajes[0].objetos[0];

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (equipo->personajes[i].objetos[j].ataque > mayordano->ataque) {
                mayordano = &equipo->personajes[i].objetos[j];
            }
        }
    }
    return mayordano;
}

Personaje *personajevida(Equipo *equipo) {
    Personaje *masvida = &equipo->personajes[0];

    for (int i = 1; i < 3; i++) {
        if (equipo->personajes[i].vida_base > masvida->vida_base) {
            masvida = &equipo->personajes[i];
        }
    }
    return masvida;
}

int main() {
    Equipo equipo1, equipo2;

    leerequipo(&equipo1);
    leerequipo(&equipo2);

    //printf("Nombre del objeto con más ataque del primer equipo:\n");
    mostrarobjeto(objetodano(&equipo1));

    //printf("Nombre del personaje con más vida del segundo equipo:\n");
    mostrarpersonaje(personajevida(&equipo2));

    return 0;
}

// 2024-12-03 01:10:21 - Pequeña mejora en el código.

// 2024-12-04 01:10:26 - Agregando nuevos comentarios.

// 2024-12-05 01:10:25 - Pequeña mejora en el código.

// 2024-12-06 01:09:32 - Agregando nuevos comentarios.

// 2024-12-07 01:08:54 - Agregando nuevos comentarios.

// 2024-12-08 01:15:02 - Actualización del proyecto.

// 2024-12-09 01:12:12 - Pequeña mejora en el código.

// 2024-12-10 01:11:09 - Optimización de funciones.

// 2024-12-11 01:10:18 - Pequeña mejora en el código.

// 2024-12-12 01:09:49 - Limpieza de código y refactorización.

// 2024-12-13 01:11:03 - Agregando nuevos comentarios.

// 2024-12-14 01:07:47 - Actualización del proyecto.

// 2024-12-15 01:15:01 - Pequeña mejora en el código.

// 2024-12-16 01:12:38 - Agregando nuevos comentarios.

// 2024-12-17 01:10:02 - Limpieza de código y refactorización.

// 2024-12-18 01:07:08 - Limpieza de código y refactorización.

// 2024-12-19 01:07:53 - Limpieza de código y refactorización.

// 2024-12-20 01:04:25 - Limpieza de código y refactorización.

// 2024-12-21 01:03:21 - Optimización de funciones.

// 2024-12-22 01:09:26 - Optimización de funciones.

// 2024-12-23 01:05:47 - Agregando nuevos comentarios.

// 2024-12-24 01:04:09 - Actualización del proyecto.

// 2024-12-25 01:03:21 - Limpieza de código y refactorización.

// 2024-12-26 01:03:35 - Pequeña mejora en el código.

// 2024-12-27 01:03:54 - Agregando nuevos comentarios.

// 2024-12-28 01:02:45 - Actualización del proyecto.

// 2024-12-29 01:10:15 - Actualización del proyecto.

// 2024-12-30 01:06:12 - Optimización de funciones.

// 2024-12-31 01:03:40 - Actualización del proyecto.

// 2025-01-01 01:09:56 - Agregando nuevos comentarios.

// 2025-01-02 01:03:28 - Actualización del proyecto.

// 2025-01-03 01:04:14 - Actualización del proyecto.

// 2025-01-04 01:02:53 - Actualización del proyecto.

// 2025-01-05 01:09:46 - Limpieza de código y refactorización.

// 2025-01-06 01:07:10 - Actualización del proyecto.

// 2025-01-07 01:04:46 - Optimización de funciones.

// 2025-01-08 01:04:34 - Optimización de funciones.

// 2025-01-09 01:04:05 - Limpieza de código y refactorización.

// 2025-01-10 01:06:07 - Agregando nuevos comentarios.

// 2025-01-11 01:04:49 - Agregando nuevos comentarios.
